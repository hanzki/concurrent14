Hannu Huhtanen
291288

This is a report on chat system that utilises a tuplespace.

---Tuplespace---

The tuplespace stores the tuples in an ArrayList and all methods that 
access the list are synchroniced to to pervent concurrent modifications.
For storing and searching tuples there are probably better choices but 
the ArrayList also works. Multiple locks could have been used for
different tuples to achieve better concurrent performance but I wanted 
to keep the implementation simple. On saving a new tuple every other thread
is notified which could be avoided with multiple locks but this doesn't
affect the correctness of the solution.


---Tuples used---

-SettingsTuple-
([TupleType], [Rows], [Channel names])

[TupleType] = String "CONF"
[Rows] = Number of rows of backlog to save for each channel e.g. "25"
[Channel names] = Names of channels seperated with semicolons
e.g. "Banana,Orange,Apple"

Settings tuple is used to store chat network settings. There should be only
one settings tuple in the tuplespace. It should not be modified after
creation. Once settings tuple has been inserted into the tuplespace other
ChatServers can join the network.

-ChannelTuple-
([TupleType], [Channel name], [Message Ids], [Listeners])

[TupleType] = String "CHAN"
[Channel name] = Name of the channel e.g. "orange"
[Message Ids] = Ids of the oldest and latest messages to the channel
seperated by a colon e.g. "23:48"
[Listeners] = Ids of the listeners listening this channel seperated by
colons e.g. "adsgh:jhsdfa:riqueuw:

Channel tuple stores information about the message backlog of the channel and
about connected listeners. There should exist only one channel tuple for each
channel. Channel tuple also acts as a lock for writing messages and adding or
removing listeners.

-BacklogTuple-
([TupleType], [Channel name], [Message Id], [Message text])

[TupleType] = String "LOG"
[Channel name] = Name of the channel e.g. "orange"
[Message Id] = Id of the message e.g. "27"
[Message text] = Text content of the message e.g. "Hello, world!"

Backlog tuple saves a single message so that it can be passed to new listeners
connecting to the channel. There shouldn't be ever more backlog tuples for a
single channel than the rows setting of the network. The contents of a backlog
tuple are only accessed when registering a new listener so a thread holding the
channel tuple can remove old messages from the backlog without causing any of
the listeners to go into a deadlock.

-MessageTuple-
([TupleType], [Listener Id], [Message Id], [Message text])

[TupleType] = String "MSG"
[Listener Id] = Id of the listener e.g. "adsgh"
[Message Id] = Id of the message e.g. "27"
[Message text] = Text content of the message e.g. "Hello, world!"

Message tuples are always addressed to a single listener. When listener
connects message tuples addressesd to the listener are created from all
messages currently in backlog. Also whenever a new message is written into
chat it is sent as message tuple to all currently connected listeners.
Listners should only receive messages that belong to the channel the listener
was registered to listen. When the listener disconnects all unread message
tuples from the tuplespace are removed.


---Chat Server---

Chat server works simply. When a new network is created a Settings tuple and
a Channel tuple for each channel are added to the tuplespace. After this any
other Chat Server may connect the network.

To write messages to the chat network the server has to accure the channel
tuple which acts as a lock. The channel lock is required to write messages,
register listeners and remove listeners. When writing a new message the message
is added to the message backlog as well as sent directly to all registered
listeners. Everytime a message is written the size of backlog is checked and
if it exceeds the row limit set at the initialization of chat network old
messages are removed.

Channel lock is also needed to add a new listener to the channel. Listeners are
identified by an UUID. When a new listener is created old messages from the
backlog are sent to the listener with Message tuples. The messages are numbered
which should guarantee the order of the messages. Listener ids are stored in
the channel tuple.

When the listener wishes to leave the network it also requires the channel lock.
Listener then removes all messages addressed to it from the tuplespace and
removes its id from the channel tuple.


---Extra Code---

The ChatServer implementation has dataholder classes representing the different
types of tuples. These classes all implement the ChatServerTuple interface.
The purpose of tuple classes is to seperate the parsing logic from the server
logic. The server and listener also use the TupleService class which contains
wrapper methods for tuplespace methods.

Tuplespace implementation has a dataholder class Tuple to make it easier to
compare tuples.


---Correctness---

There shouldn't be any problems with concurrency because the ChatServer
implementation is stateless and most operations on tuplespace require the
channel tuple lock.


---Unexpected behaviour---

I haven't noticed any unexpected behaviour with this implementation.
